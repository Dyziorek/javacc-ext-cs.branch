plugins {
    id 'java'
    id 'application'
}

version '1.0'

sourceCompatibility = 1.8

def bootstrapFileDir = file("$buildDir/generated-sources/main/java")

task deleteGeneratedFiles(type: Delete){
    delete "${buildDir}/generated-sources/"
}

task deleteduplicates(type: Delete){
    delete "${buildDir}/generated-sources/main/java/org/javacc/jjtree/ASTBNF.java"
    delete "${buildDir}/generated-sources/main/java/org/javacc/jjtree/ASTBNFAction.java"
    delete "${buildDir}/generated-sources/main/java/org/javacc/jjtree/ASTBNFDeclaration.java"
    delete "${buildDir}/generated-sources/main/java/org/javacc/jjtree/ASTBNFNodeScope.java"
    delete "${buildDir}/generated-sources/main/java/org/javacc/jjtree/ASTCompilationUnit.java"
    delete "${buildDir}/generated-sources/main/java/org/javacc/jjtree/ASTExpansionNodeScope.java"
    delete "${buildDir}/generated-sources/main/java/org/javacc/jjtree/ASTGrammar.java"
    delete "${buildDir}/generated-sources/main/java/org/javacc/jjtree/ASTJavacode.java"
    delete "${buildDir}/generated-sources/main/java/org/javacc/jjtree/ASTJavacodeBody.java"
    delete "${buildDir}/generated-sources/main/java/org/javacc/jjtree/ASTNodeDescriptor.java"
    delete "${buildDir}/generated-sources/main/java/org/javacc/jjtree/ASTNodeDescriptorExpression.java"
    delete "${buildDir}/generated-sources/main/java/org/javacc/jjtree/ASTOptionBinding.java"
    delete "${buildDir}/generated-sources/main/java/org/javacc/jjtree/Token.java"
    delete "${buildDir}/generated-sources/main/java/org/javacc/parser/Token.java"
}

task generatebootstrapFiles(type: JavaExec) {
    classpath = files("${rootDir}/bootstrap/javacc.jar")
    args = ["-OUTPUT_DIRECTORY=${buildDir}/generated-sources/main/java/org/javacc/parser", "${rootDir}/src/main/javacc/JavaCC.jj"]
    main = 'javacc'
}

task generatebootstrapTreeFiles(type: JavaExec) {
    classpath = files("${rootDir}/bootstrap/javacc.jar")
    args = ["-OUTPUT_DIRECTORY=${buildDir}/generated-sources/main/java/org/javacc/jjtree", "${rootDir}/src/main/java/org/javacc/jjtree/jjtree.jjt"]
    main = 'jjtree'
}

task generatebootstrapTreeNodeFiles(type: JavaExec) {
    classpath = files("${rootDir}/bootstrap/javacc.jar")
    args = ["-OUTPUT_DIRECTORY=${buildDir}/generated-sources/main/java/org/javacc/jjtree", "${buildDir}/generated-sources/main/java/org/javacc/jjtree/jjtree.jj"]
    main = 'javacc'
}

generatebootstrapTreeNodeFiles.dependsOn generatebootstrapTreeFiles
generatebootstrapTreeFiles.dependsOn generatebootstrapFiles
generatebootstrapFiles.dependsOn deleteGeneratedFiles
deleteduplicates.dependsOn generatebootstrapTreeNodeFiles

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'junit', name:  'junit', version: '4.12'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

sourceSets {
    main {
        java {
            srcDir bootstrapFileDir
            project.tasks.compileJava.dependsOn project.tasks.deleteduplicates
        }
    }
}


processResources {
    from ("src/templates") {
        into ("templates/")
    }

    from ("src/" ){
        include("*.properties")
    }

    from ("src/main/java/org/javacc/parser" ){
        include("*.jj")
        into ("org/javacc/parser/")
    }
    from ("src/main/java/org/javacc/utils" ){
        include("*.jj")
        into ("org/javacc/utils/")
    }
    from ("src/main/java/org/javacc/jjtree" ){
        include("*.jjt")
        into ("org/javacc/jjtree/")
    }
    from ("build/generated-sources/main/java/org/javacc/jjtree" ){
        include("*.jj")
        into ("org/javacc/jjtree/")
    }
}

//jar {
//    from ("src/main/templates") {
//        into ("templates/")
//    }
//
//    from ("src/" ){
//        include("*.properties")
//    }
//
//    from ("src/main/java/org/javacc/parser" ){
//        include("*.jj")
//        into ("org/javacc/parser/")
//    }
//    from ("src/main/java/org/javacc/utils" ){
//        include("*.jj")
//        into ("org/javacc/utils/")
//    }
//    from ("src/main/java/org/javacc/jjtree" ){
//        include("*.jjt")
//        into ("org/javacc/jjtree/")
//    }
//    from ("build/generated-sources/main/java/org/javacc/jjtree" ){
//        include("*.jj")
//        into ("org/javacc/jjtree/")
//    }
//}

application {
    mainClassName = 'javacc'
    executableDir = "${rootDir}/test.tmp"
}

task runCSS (type: JavaExec) {
        classpath = files(jar.archivePath)
        main = "javacc";
        args = [
                "cssStyle.jj"
        ]
        workingDir = "${rootDir}/test.tmp"
}

task runJson (type: JavaExec) {
    classpath = files(jar.archivePath)
    main = "javacc";
    args = [
            "jsonCheck.jj"
    ]
    workingDir = "${rootDir}/test.tmp"
}

task runTests{
    doLast {
        println "Tests Done"
    }
}

runJson.dependsOn runCSS
runTests.dependsOn runJson

project.afterEvaluate {
    println "java = " + sourceSets.main.java.source
    println "resource = " + sourceSets.main.resources.source
}